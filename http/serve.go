package http

import (
	"net/http"

	"github.com/zenazn/goji"
	"github.com/zenazn/goji/web"
)

// Route is generated by custom CRUD
type Route struct {
	Method  string          `json:"method"`
	Pattern string          `json:"pattern"`
	Handler web.HandlerType `json:"-"`
}

var routes []Route
var methods = map[string]func(web.PatternType, web.HandlerType){
	"Get":    goji.Get,
	"Post":   goji.Post,
	"Put":    goji.Put,
	"Delete": goji.Delete,
}

// AddRoute serve routes handler on server
func (r Route) AddRoute() {
	methods[r.Method](r.Pattern, r.Handler)
}

// MountRoutes group all routes founded on CRUD
func MountRoutes(mRoutes []string) []Route {
	for _, path := range mRoutes {
		r := Route{
			Method:  "Get",
			Pattern: path,
			Handler: Handler,
		}
		routes = append(routes, r)
	}
	return routes
}

// Handler is a tester for that step
func Handler(c web.C, w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Hello world"))
}

// StartServer on GoJi package
func StartServer(fRoutes []string) {
	routes := MountRoutes(fRoutes)
	for _, r := range routes {
		r.AddRoute()
	}
	goji.Serve()
}
